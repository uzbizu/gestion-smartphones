pipeline {
    agent any

    environment {
        DOCKER_COMPOSE_PATH = "C:\\Users\\user\\Desktop\\gestion-smartphones\\docker-compose.yml"
        NOTIFY_EMAIL = "bousseynou15@gmail.com"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/uzbizu/gestion-smartphones'
            }
        }

        // // Étape du pipeline dédiée à l'analyse SonarQube
        // stage('SonarQube Analysis') {
        //     steps {
        //         // Active l'environnement SonarQube configuré dans Jenkins
        //         // "SonarQubeServer" est le nom que tu as défini dans "Manage Jenkins > Configure System"
        //         withSonarQubeEnv('SonarQube_Local') { 
        //             script {
        //                 // Récupère le chemin du SonarQubeScanner installé via "Global Tool Configuration"
        //                 def scannerHome = tool 'SonarQubeScanner' 
                        
        //                 // Exécute la commande sonar-scanner pour analyser le code
        //                 // Le scanner envoie les résultats au serveur SonarQube
        //                 bat "${scannerHome}/bin/sonar-scanner"
        //             }
        //         }
        //     }
        // }



                // === Étape 1 : Analyse SonarQube ===
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube_Local') {
                    script {
                        def scannerHome = tool 'SonarQubeScanner'
                        bat """
                            "${scannerHome}\\bin\\sonar-scanner" ^
                              -Dsonar.projectKey=sonarqube ^
                              -Dsonar.sources=. ^
                              -Dsonar.host.url=http://localhost:10000 ^
                              -Dsonar.login=sonarqube-token
                        """
                    }
                }
            }
        }



        // Étape du pipeline qui vérifie le Quality Gate
        stage('Quality Gate') {
            steps {
                // Définit un délai maximum de 3 minutes pour attendre la réponse de SonarQube
                timeout(time: 2, unit: 'MINUTES') {
                    // Attend le résultat du Quality Gate (succès ou échec)
                    // Si le Quality Gate échoue, le pipeline est automatiquement interrompu (abortPipeline: true)
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Install Backend') {
            steps {
                dir('gestion-smartphone-backend') {
                    bat 'npm install'
                }
            }
        }

        stage('Install & Build Frontend') {
            steps {
                dir('gestion-smartphone-frontend') {
                    bat 'npm install'
                    bat 'npm run build'
                }
            }
        }

        stage('Docker Build & Up') {
            steps {
                bat "docker-compose -f ${DOCKER_COMPOSE_PATH} build"
                bat "docker-compose -f ${DOCKER_COMPOSE_PATH} up -d"
            }
        }

        stage('Tag Docker Images') {
            steps {
                bat 'docker tag gestion-smartphones-backend:latest ouzba/gestion-smartphones-backend:lts'
                bat 'docker tag gestion-smartphones-frontend:latest ouzba/gestion-smartphones-frontend:lts'
            }
        }


        stage('Push Docker Images') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-cred', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        bat '''
                            echo %DOCKER_PASS% | docker login -u %DOCKER_USER% --password-stdin
                            docker push %DOCKER_USER%/gestion-smartphones-backend:lts
                            docker push %DOCKER_USER%/gestion-smartphones-frontend:lts
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Build and Docker push successful!'
            echo 'Build and deployment successful!'
            mail to: "${NOTIFY_EMAIL}",
                 subject: "SUCCESS: Jenkins Build Notification",
                 body: "The Jenkins build and deployment process has completed successfully."
        }
        failure {
            echo 'Build or Docker push failed.'
            echo 'Build failed.'
            mail to: "${NOTIFY_EMAIL}",
                 subject: "FAILURE: Jenkins Build Notification",
                 body: "The Jenkins build and deployment process has FAILED. Please check Jenkins logs."
        }
    }

}
